{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyOI8wP31o/SbAa9CCSCfPjD",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sasi-Kiran-280/python-for-learning/blob/module-1/Untitled0.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##find the person elegible for voting\n",
        "a=int(input())\n",
        "if a>=18 :\n",
        "   print(\"he can vote\")\n",
        "else :\n",
        "  print(\"he can\")"
      ],
      "metadata": {
        "id": "X9HAZj5APLFh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## find max of 3 no.s\n",
        "a=int(input())\n",
        "b=int(input())\n",
        "c=int(input())\n",
        "if a>b & a>c:\n",
        "    print(\"a is max\")\n",
        "elif b>a & b>c :\n",
        "    print(\"b is max\")\n",
        "else :\n",
        "  print(\"c is max\")"
      ],
      "metadata": {
        "id": "KZqtMuenReso"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## iinterchange numbers\n",
        "a=int(input())\n",
        "b=int(input())\n",
        "c=a\n",
        "a=b\n",
        "b=c\n",
        "print (a)\n",
        "print(b)"
      ],
      "metadata": {
        "id": "iitrX0YbTVVG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## max marks in 5 numbers\n",
        "a=int(input())\n",
        "b=int(input())\n",
        "c=int(input())\n",
        "d=int(input())\n",
        "e=int(input())\n",
        "if a>b & a>c&a>d&a>e:\n",
        "  print(a,\"is max\")\n",
        "\n",
        "\n",
        "elif b>a & b>c & b>d & b>e:\n",
        "  print(b,\"is max\")\n",
        "elif c>a & c>b & c>d & c>e:\n",
        "  print(c,\"is max\")\n",
        "elif d>a & d>c & b<d & d>b:\n",
        "  print(d,\"is max\")\n",
        "else :\n",
        "  print(e,\"is max\")"
      ],
      "metadata": {
        "id": "m16MteEfU2H0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##triangle is equilatoral,isoceles, scalene\n",
        "a=int(input())\n",
        "b=int(input())\n",
        "c=int(input())\n",
        "if a==b==c:\n",
        "  print(\"it is an equi\")\n",
        "elif a==b or b==c:\n",
        "  print(\"it is an iso\")\n",
        "else:\n",
        "  print(\"it is an sca\")\n"
      ],
      "metadata": {
        "id": "NdcuneHBX-4c"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##leap year or not\n",
        "y=int(input())\n",
        "if y%4==0 and y%100!=0 and y%400!=0:\n",
        "  print(\"it is a leap year\")\n",
        "elif y%4==0 and y%100==0 and y%400==0:\n",
        "  print(\"it is  leap year\")\n",
        "else :\n",
        "  print(\"it is not leap year\")\n"
      ],
      "metadata": {
        "id": "Hi-lO_Jea3xa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "## divisible by 5 and 11"
      ],
      "metadata": {
        "id": "kWDa7mASeC1Y"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
